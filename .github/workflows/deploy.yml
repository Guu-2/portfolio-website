name: Deploy Portfolio Website

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate JSON data
      run: |
        python -c "
import json
import sys
from app import validate_projects_data, validate_skills_data, validate_timeline_data

try:
    # Validate projects.json
    with open('static/data/projects.json', 'r') as f:
        projects = json.load(f)
    validate_projects_data(projects)
    print('✅ projects.json is valid')
    
    # Validate skills.json
    with open('static/data/skills.json', 'r') as f:
        skills_data = json.load(f)
    validate_skills_data(skills_data)
    print('✅ skills.json is valid')
    
    # Validate timeline.json
    with open('static/data/timeline.json', 'r') as f:
        timeline_data = json.load(f)
    validate_timeline_data(timeline_data)
    print('✅ timeline.json is valid')
    
    print('🎉 All JSON data files are valid!')
    
except Exception as e:
    print(f'❌ Validation error: {e}')
    sys.exit(1)
"
    
    - name: Test Flask app
      run: |
        python -c "
from app import app
import json

# Test that the app can start
with app.test_client() as client:
    # Test main routes
    response = client.get('/')
    assert response.status_code == 200
    print('✅ Home page loads successfully')
    
    response = client.get('/projects')
    assert response.status_code == 200
    print('✅ Projects page loads successfully')
    
    response = client.get('/skills')
    assert response.status_code == 200
    print('✅ Skills page loads successfully')
    
    response = client.get('/timeline')
    assert response.status_code == 200
    print('✅ Timeline page loads successfully')
    
    print('🎉 All routes are working!')
"
    
    - name: Test Chatbot API
      run: |
        python -c "
from app import app
import json

# Test chatbot endpoints
with app.test_client() as client:
    # Test chatbot greeting
    response = client.post('/api/chat', json={'message': 'Hello'})
    assert response.status_code == 200
    data = response.get_json()
    assert 'response' in data
    assert 'text' in data['response']
    print('✅ Chatbot greeting works')
    
    # Test projects query
    response = client.post('/api/chat', json={'message': 'Tell me about your projects'})
    assert response.status_code == 200
    data = response.get_json()
    assert data['intent'] == 'projects'
    print('✅ Projects query works')
    
    # Test skills query
    response = client.post('/api/chat', json={'message': 'What skills do you have?'})
    assert response.status_code == 200
    data = response.get_json()
    assert data['intent'] == 'skills'
    print('✅ Skills query works')
    
    # Test timeline query
    response = client.post('/api/chat', json={'message': 'Show me your timeline'})
    assert response.status_code == 200
    data = response.get_json()
    assert data['intent'] == 'timeline'
    print('✅ Timeline query works')
    
    # Test contact query
    response = client.post('/api/chat', json={'message': 'How can I contact you?'})
    assert response.status_code == 200
    data = response.get_json()
    assert data['intent'] == 'contact'
    print('✅ Contact query works')
    
    # Test suggestions endpoint
    response = client.get('/api/chat/suggestions')
    assert response.status_code == 200
    data = response.get_json()
    assert 'suggestions' in data
    assert len(data['suggestions']) > 0
    print('✅ Suggestions endpoint works')
    
    print('🎉 All chatbot tests passed!')
"